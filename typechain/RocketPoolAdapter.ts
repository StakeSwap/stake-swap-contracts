/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RocketPoolAdapterInterface extends utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "accDeposit()": FunctionFragment;
    "accWithdraw()": FunctionFragment;
    "adaptorName()": FunctionFragment;
    "canDeposit(uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "getAPR()": FunctionFragment;
    "getDepositAmount(uint256)": FunctionFragment;
    "getRocketDAOProtocolSettingsDeposit()": FunctionFragment;
    "getRocketDrocketDepositPool()": FunctionFragment;
    "getRocketPoolContractAddresst(string)": FunctionFragment;
    "getRocketVault()": FunctionFragment;
    "getTokens()": FunctionFragment;
    "rETH()": FunctionFragment;
    "rocketPoolStorage()": FunctionFragment;
    "supportWithdraw()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRECISION"
      | "accDeposit"
      | "accWithdraw"
      | "adaptorName"
      | "canDeposit"
      | "deposit"
      | "getAPR"
      | "getDepositAmount"
      | "getRocketDAOProtocolSettingsDeposit"
      | "getRocketDrocketDepositPool"
      | "getRocketPoolContractAddresst"
      | "getRocketVault"
      | "getTokens"
      | "rETH"
      | "rocketPoolStorage"
      | "supportWithdraw"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adaptorName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDepositAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRocketDAOProtocolSettingsDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRocketDrocketDepositPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRocketPoolContractAddresst",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRocketVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "rETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rocketPoolStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adaptorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRocketDAOProtocolSettingsDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRocketDrocketDepositPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRocketPoolContractAddresst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRocketVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rocketPoolStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface RocketPoolAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RocketPoolAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    accDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    accWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    adaptorName(overrides?: CallOverrides): Promise<[string]>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAPR(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRocketDAOProtocolSettingsDeposit(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRocketDrocketDepositPool(overrides?: CallOverrides): Promise<[string]>;

    getRocketPoolContractAddresst(
      _contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRocketVault(overrides?: CallOverrides): Promise<[string]>;

    getTokens(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        token0: string;
        token1: string;
        token2: string;
      }
    >;

    rETH(overrides?: CallOverrides): Promise<[string]>;

    rocketPoolStorage(overrides?: CallOverrides): Promise<[string]>;

    supportWithdraw(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  accDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  accWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  adaptorName(overrides?: CallOverrides): Promise<string>;

  canDeposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAPR(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRocketDAOProtocolSettingsDeposit(
    overrides?: CallOverrides
  ): Promise<string>;

  getRocketDrocketDepositPool(overrides?: CallOverrides): Promise<string>;

  getRocketPoolContractAddresst(
    _contractName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRocketVault(overrides?: CallOverrides): Promise<string>;

  getTokens(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      token0: string;
      token1: string;
      token2: string;
    }
  >;

  rETH(overrides?: CallOverrides): Promise<string>;

  rocketPoolStorage(overrides?: CallOverrides): Promise<string>;

  supportWithdraw(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    accWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    adaptorName(overrides?: CallOverrides): Promise<string>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    getAPR(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRocketDAOProtocolSettingsDeposit(
      overrides?: CallOverrides
    ): Promise<string>;

    getRocketDrocketDepositPool(overrides?: CallOverrides): Promise<string>;

    getRocketPoolContractAddresst(
      _contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRocketVault(overrides?: CallOverrides): Promise<string>;

    getTokens(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        token0: string;
        token1: string;
        token2: string;
      }
    >;

    rETH(overrides?: CallOverrides): Promise<string>;

    rocketPoolStorage(overrides?: CallOverrides): Promise<string>;

    supportWithdraw(overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    accWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    adaptorName(overrides?: CallOverrides): Promise<BigNumber>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAPR(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRocketDAOProtocolSettingsDeposit(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRocketDrocketDepositPool(overrides?: CallOverrides): Promise<BigNumber>;

    getRocketPoolContractAddresst(
      _contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRocketVault(overrides?: CallOverrides): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    rETH(overrides?: CallOverrides): Promise<BigNumber>;

    rocketPoolStorage(overrides?: CallOverrides): Promise<BigNumber>;

    supportWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adaptorName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAPR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRocketDAOProtocolSettingsDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRocketDrocketDepositPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRocketPoolContractAddresst(
      _contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRocketVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rocketPoolStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
