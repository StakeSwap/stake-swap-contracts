/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CurveSwap, CurveSwapInterface } from "../CurveSwap";

const _abi = [
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bc7806100206000396000f3fe6080604052600436106101185760003560e01c8063be78e8d9116100a0578063ce06961411610064578063ce0696141461025e578063d148d39214610273578063ebdfda5e14610286578063f2cd3a121461029b578063f781b24e146102b057600080fd5b8063be78e8d9146101cb578063c1fe3e481461021f578063c9ac8c8e14610234578063ca8aa0e414610249578063cbc74de71461012457600080fd5b8063565d3e6e116100e7578063565d3e6e146101b65780635a33bbbe146101cb578063698e0796146101e0578063aa6430c6146101f5578063ad5c46481461020a57600080fd5b8063020b627d1461012457806323c34a64146101515780634aa07e64146101745780634bc0dcb6146101a157600080fd5b3661011f57005b600080fd5b34801561013057600080fd5b506101396102c5565b604051600f9190910b81526020015b60405180910390f35b34801561015d57600080fd5b50610166610315565b604051908152602001610148565b34801561018057600080fd5b50610189610344565b6040516001600160a01b039091168152602001610148565b3480156101ad57600080fd5b50610189610388565b3480156101c257600080fd5b506101896103ab565b3480156101d757600080fd5b506101396103ef565b3480156101ec57600080fd5b506101896103ff565b34801561020157600080fd5b50610189610422565b34801561021657600080fd5b50610189610445565b34801561022b57600080fd5b50610189610489565b34801561024057600080fd5b506101896104cd565b34801561025557600080fd5b506101896104f0565b34801561026a57600080fd5b50610189610534565b610166610281366004610a7e565b610578565b34801561029257600080fd5b5061018961062c565b3480156102a757600080fd5b50610166610670565b3480156102bc57600080fd5b5061018961069f565b6000466001036102d55750600190565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064015b60405180910390fd5b6000466001036102d557507f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b6000466001036103675750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b466005036102d55750736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b6000466001036102d5575073dc24316b9ae028f1497c275eb9192a3ea0f6702290565b6000466001036103ce5750735e8422345238f34275888049021821e8e08caa1f90565b466005036102d55750733e04888b1c07a9805861c19551f7ed53145bd8d490565b6000466001036102d55750600090565b6000466001036102d557507306325440d014e39736583c165c2963ba99faf14e90565b6000466001036102d5575073a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b600046600103610468575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b466005036102d5575073b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b6000466001036104ac575073ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b466005036102d55750731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b6000466001036103ce575073ac3e018457b222d93114458476f3e3416abbe38f90565b600046600103610513575073ae78736cd615f374d3085123a210448e74fc639390565b466005036102d5575073ae78736cd615f374d3085123a210448e74fc639390565b600046600103610557575073ba12222222228d8ba445958a75a0704d566bf2c890565b466005036102d5575073ba12222222228d8ba445958a75a0704d566bf2c890565b6000806001600160a01b03871661059057503461059b565b61059b8786886106c2565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101879052600060648201526001600160a01b03861690633df0212490839060840160206040518083038185885af11580156105fc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106219190610adc565b979650505050505050565b60004660010361064f575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036102d55750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6000466001036102d557507f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b6000466001036102d5575073f43211935c781d5ca1a41d2041f397b8a7366c7a90565b80158061073c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a9190610adc565b155b6107a75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161030c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526107f99084906107fe565b505050565b6000610853826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108d09092919063ffffffff16565b8051909150156107f957808060200190518101906108719190610af5565b6107f95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161030c565b60606108df84846000856108e7565b949350505050565b6060824710156109485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161030c565b600080866001600160a01b031685876040516109649190610b42565b60006040518083038185875af1925050503d80600081146109a1576040519150601f19603f3d011682016040523d82523d6000602084013e6109a6565b606091505b50915091506106218783838760608315610a21578251600003610a1a576001600160a01b0385163b610a1a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030c565b50816108df565b6108df8383815115610a365781518083602001fd5b8060405162461bcd60e51b815260040161030c9190610b5e565b80356001600160a01b0381168114610a6757600080fd5b919050565b8035600f81900b8114610a6757600080fd5b600080600080600060a08688031215610a9657600080fd5b610a9f86610a50565b945060208601359350610ab460408701610a50565b9250610ac260608701610a6c565b9150610ad060808701610a6c565b90509295509295909350565b600060208284031215610aee57600080fd5b5051919050565b600060208284031215610b0757600080fd5b81518015158114610b1757600080fd5b9392505050565b60005b83811015610b39578181015183820152602001610b21565b50506000910152565b60008251610b54818460208701610b1e565b9190910192915050565b6020815260008251806020840152610b7d816040850160208701610b1e565b601f01601f1916919091016040019291505056fea26469706673582212207caf2493beabd833c8dfb30af4d6cb67d7dbf64d41a1eb16e5babc995727d4f464736f6c63430008110033";

type CurveSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwap__factory extends ContractFactory {
  constructor(...args: CurveSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveSwap> {
    return super.deploy(overrides || {}) as Promise<CurveSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveSwap {
    return super.attach(address) as CurveSwap;
  }
  override connect(signer: Signer): CurveSwap__factory {
    return super.connect(signer) as CurveSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapInterface {
    return new utils.Interface(_abi) as CurveSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwap {
    return new Contract(address, _abi, signerOrProvider) as CurveSwap;
  }
}
