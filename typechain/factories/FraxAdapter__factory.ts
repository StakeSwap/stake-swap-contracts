/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FraxAdapter, FraxAdapterInterface } from "../FraxAdapter";

const _abi = [
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adaptorName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canDeposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getDepositAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "token2",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supportWithdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040524260805234801561001457600080fd5b506001600055608051610862610032600039600050506108626000f3fe6080604052600436106100dd5760003560e01c8063aa6ca8081161007f578063c9ac8c8e11610059578063c9ac8c8e14610260578063d0e30db014610275578063ebdfda5e1461027d578063fe92d7701461029257600080fd5b8063aa6ca808146101f0578063aaf5eb681461022f578063c89d5b8b1461024b57600080fd5b806339443b8e116100bb57806339443b8e1461014a578063565d3e6e1461017a5780638c9adb2d146101a7578063a8b67685146101da57600080fd5b80632e1a7d4d146100e25780633171668714610116578063378de45b1461012c575b600080fd5b3480156100ee57600080fd5b506101036100fd3660046106a4565b50600090565b6040519081526020015b60405180910390f35b34801561012257600080fd5b5061010360025481565b34801561013857600080fd5b506101036101473660046106a4565b90565b34801561015657600080fd5b5061016a6101653660046106a4565b6102a6565b604051901515815260200161010d565b34801561018657600080fd5b5061018f61033d565b6040516001600160a01b03909116815260200161010d565b3480156101b357600080fd5b5060408051808201825260048152630cce4c2f60e31b6020820152905161010d91906106bd565b3480156101e657600080fd5b5061010360015481565b3480156101fc57600080fd5b506102056103c1565b604080516001600160a01b039485168152928416602084015292169181019190915260600161010d565b34801561023b57600080fd5b50610103670de0b6b3a764000081565b34801561025757600080fd5b506101036103e9565b34801561026c57600080fd5b5061018f61057c565b61010361059f565b34801561028957600080fd5b5061018f610660565b34801561029e57600080fd5b50600061016a565b6000816000036102b857506000919050565b60006102c2610660565b9050806001600160a01b031663b6d24f186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610326919061070b565b156103345750600092915050565b50600192915050565b6000466001036103605750735e8422345238f34275888049021821e8e08caa1f90565b466005036103815750733e04888b1c07a9805861c19551f7ed53145bd8d490565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064015b60405180910390fd5b60008060006103ce61033d565b92506103d861057c565b91506103e2610660565b9050909192565b6000806103f461057c565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610734565b90508060000361046d5760009250505090565b80826001600160a01b0316636fcf5e5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d0919061074d565b63ffffffff16836001600160a01b031663bafedcaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105389190610773565b610546906301e187e061079c565b61055091906107f2565b61056290670de0b6b3a764000061079c565b6001600160c01b03166105759190610818565b9250505090565b600046600103610360575073ac3e018457b222d93114458476f3e3416abbe38f90565b60008034116105e25760405162461bcd60e51b815260206004820152600f60248201526e1b9bdb8b5e995c9bc8185b5bdd5b9d608a1b60448201526064016103b8565b60006105ec610660565b604051634dcd454760e01b81523360048201526001600160a01b039190911690634dcd454790349060240160206040518083038185885af1158015610635573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061065a9190610734565b92915050565b600046600103610683575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036103815750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6000602082840312156106b657600080fd5b5035919050565b600060208083528351808285015260005b818110156106ea578581018301518582016040015282016106ce565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561071d57600080fd5b8151801515811461072d57600080fd5b9392505050565b60006020828403121561074657600080fd5b5051919050565b60006020828403121561075f57600080fd5b815163ffffffff8116811461072d57600080fd5b60006020828403121561078557600080fd5b81516001600160c01b038116811461072d57600080fd5b6001600160c01b038281168282168181028316929181158285048214176107d357634e487b7160e01b600052601160045260246000fd5b50505092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b038381168061080c5761080c6107dc565b92169190910492915050565b600082610827576108276107dc565b50049056fea26469706673582212208ee3eb89f44589c8fb8716a0423b5306e1874ea28005d98353cd6a8c7b8297eb64736f6c63430008110033";

type FraxAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FraxAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FraxAdapter__factory extends ContractFactory {
  constructor(...args: FraxAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FraxAdapter> {
    return super.deploy(overrides || {}) as Promise<FraxAdapter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FraxAdapter {
    return super.attach(address) as FraxAdapter;
  }
  override connect(signer: Signer): FraxAdapter__factory {
    return super.connect(signer) as FraxAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FraxAdapterInterface {
    return new utils.Interface(_abi) as FraxAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FraxAdapter {
    return new Contract(address, _abi, signerOrProvider) as FraxAdapter;
  }
}
