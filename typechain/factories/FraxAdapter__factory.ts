/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FraxAdapter, FraxAdapterInterface } from "../FraxAdapter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adaptorName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "buyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canDeposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "canWithdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "token2",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040524260805234801561001457600080fd5b506001600055608051610f3161003260003960005050610f316000f3fe6080604052600436106100e15760003560e01c8063aaf5eb681161007f578063c89d5b8b11610059578063c89d5b8b146102b4578063c9ac8c8e146102c9578063d0e30db0146102de578063ebdfda5e146102e657600080fd5b8063aaf5eb681461026f578063ad5c46481461028b578063b51459fe146102a057600080fd5b8063565d3e6e116100bb578063565d3e6e146101c85780638c9adb2d146101f5578063a482171914610228578063aa6ca8081461023057600080fd5b80632397e4d7146101455780632e1a7d4d1461017857806339443b8e1461019857600080fd5b36610140576100ee6102fb565b6001600160a01b0316336001600160a01b03161461013e5760405162461bcd60e51b815260206004820152600860248201526709c9ea840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561015157600080fd5b50610165610160366004610d4e565b61037a565b6040519081526020015b60405180910390f35b34801561018457600080fd5b50610165610193366004610d4e565b6103fa565b3480156101a457600080fd5b506101b86101b3366004610d4e565b6104c2565b604051901515815260200161016f565b3480156101d457600080fd5b506101dd610559565b6040516001600160a01b03909116815260200161016f565b34801561020157600080fd5b5060408051808201825260048152630cce4c2f60e31b6020820152905161016f9190610d8b565b61016561059d565b34801561023c57600080fd5b5061024561061e565b604080516001600160a01b039485168152928416602084015292169181019190915260600161016f565b34801561027b57600080fd5b50610165670de0b6b3a764000081565b34801561029757600080fd5b506101dd6102fb565b3480156102ac57600080fd5b5060006101b8565b3480156102c057600080fd5b5061016561063f565b3480156102d557600080fd5b506101dd6107d2565b6101656107f5565b3480156102f257600080fd5b506101dd6108ee565b60004660010361031e575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b4660050361033f575073b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b6044820152606401610135565b6000610384610932565b600082116103c25760405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b6044820152606401610135565b60006103cc61061e565b505090506103dc8133308661098b565b60006103e7846109fc565b925050506103f56001600055565b919050565b6000610404610932565b600082116104425760405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b6044820152606401610135565b61044b826104c2565b6104885760405162461bcd60e51b815260206004820152600e60248201526d10d0539393d50811115413d4d25560921b6044820152606401610135565b60405162461bcd60e51b815260206004820152600f60248201526e43414e4e4f5420574954484452415760881b6044820152606401610135565b6000816000036104d457506000919050565b60006104de6108ee565b9050806001600160a01b031663b6d24f186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190610dbe565b156105505750600092915050565b50600192915050565b60004660010361057c5750735e8422345238f34275888049021821e8e08caa1f90565b4660050361033f5750733e04888b1c07a9805861c19551f7ed53145bd8d490565b60006105a7610932565b600034116105e95760405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b6044820152606401610135565b60006105f36109fc565b905060006105ff61061e565b5050905061060e813384610a38565b50905061061b6001600055565b90565b600080600061062b6107d2565b9250610635610559565b9293600092509050565b60008061064a6107d2565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190610de7565b9050806000036106c35760009250505090565b80826001600160a01b0316636fcf5e5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610e00565b63ffffffff16836001600160a01b031663bafedcaa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610e26565b61079c906301e187e0610e4f565b6107a69190610ea5565b6107b890670de0b6b3a7640000610e4f565b6001600160c01b03166107cb9190610ecb565b9250505090565b60004660010361057c575073ac3e018457b222d93114458476f3e3416abbe38f90565b60006107ff610932565b600034116108415760405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b6044820152606401610135565b61084a346104c2565b6108875760405162461bcd60e51b815260206004820152600e60248201526d10d0539393d50811115413d4d25560921b6044820152606401610135565b6000610891610a6d565b9050600061089d61061e565b505090506108ac813384610a38565b60405182815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a250905061061b6001600055565b600046600103610911575073bafa44efe7901e04e39dad13167d089c559c113890565b4660050361033f5750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6002600054036109845760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610135565b6002600055565b6040516001600160a01b03808516602483015283166044820152606481018290526109f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610aec565b50505050565b60405162461bcd60e51b815260206004820152600e60248201526d1393d517d253541311535153951160921b6044820152600090606401610135565b6040516001600160a01b038316602482015260448101829052610a6890849063a9059cbb60e01b906064016109bf565b505050565b600080610a786108ee565b604051634dcd454760e01b81523060048201526001600160a01b039190911690634dcd454790349060240160206040518083038185885af1158015610ac1573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610ae69190610de7565b92915050565b6000610b41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bbe9092919063ffffffff16565b805190915015610a685780806020019051810190610b5f9190610dbe565b610a685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610135565b6060610bcd8484600085610bd5565b949350505050565b606082471015610c365760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610135565b600080866001600160a01b03168587604051610c529190610edf565b60006040518083038185875af1925050503d8060008114610c8f576040519150601f19603f3d011682016040523d82523d6000602084013e610c94565b606091505b5091509150610ca587838387610cb0565b979650505050505050565b60608315610d1f578251600003610d18576001600160a01b0385163b610d185760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610135565b5081610bcd565b610bcd8383815115610d345781518083602001fd5b8060405162461bcd60e51b81526004016101359190610d8b565b600060208284031215610d6057600080fd5b5035919050565b60005b83811015610d82578181015183820152602001610d6a565b50506000910152565b6020815260008251806020840152610daa816040850160208701610d67565b601f01601f19169190910160400192915050565b600060208284031215610dd057600080fd5b81518015158114610de057600080fd5b9392505050565b600060208284031215610df957600080fd5b5051919050565b600060208284031215610e1257600080fd5b815163ffffffff81168114610de057600080fd5b600060208284031215610e3857600080fd5b81516001600160c01b0381168114610de057600080fd5b6001600160c01b03828116828216818102831692918115828504821417610e8657634e487b7160e01b600052601160045260246000fd5b50505092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b0383811680610ebf57610ebf610e8f565b92169190910492915050565b600082610eda57610eda610e8f565b500490565b60008251610ef1818460208701610d67565b919091019291505056fea264697066735822122081a0f841a255f12af4cfdd694d08761d0cfaa34b11b162c0e143d655186c5d5364736f6c63430008110033";

type FraxAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FraxAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FraxAdapter__factory extends ContractFactory {
  constructor(...args: FraxAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FraxAdapter> {
    return super.deploy(overrides || {}) as Promise<FraxAdapter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FraxAdapter {
    return super.attach(address) as FraxAdapter;
  }
  override connect(signer: Signer): FraxAdapter__factory {
    return super.connect(signer) as FraxAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FraxAdapterInterface {
    return new utils.Interface(_abi) as FraxAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FraxAdapter {
    return new Contract(address, _abi, signerOrProvider) as FraxAdapter;
  }
}
