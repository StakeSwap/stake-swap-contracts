/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FraxAdapter, FraxAdapterInterface } from "../FraxAdapter";

const _abi = [
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adaptorName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canDeposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "canWithdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getDepositAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "token2",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040524260805234801561001457600080fd5b50600160005560805161095b6100326000396000505061095b6000f3fe6080604052600436106100dd5760003560e01c8063aa6ca8081161007f578063c89d5b8b11610059578063c89d5b8b1461025e578063c9ac8c8e14610273578063d0e30db014610288578063ebdfda5e1461029057600080fd5b8063aa6ca808146101ef578063aaf5eb681461022e578063b51459fe1461024a57600080fd5b806339443b8e116100bb57806339443b8e14610149578063565d3e6e146101795780638c9adb2d146101a6578063a8b67685146101d957600080fd5b80632e1a7d4d146100e25780633171668714610115578063378de45b1461012b575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461079d565b6102a5565b6040519081526020015b60405180910390f35b34801561012157600080fd5b5061010260025481565b34801561013757600080fd5b5061010261014636600461079d565b90565b34801561015557600080fd5b5061016961016436600461079d565b6102ee565b604051901515815260200161010c565b34801561018557600080fd5b5061018e610385565b6040516001600160a01b03909116815260200161010c565b3480156101b257600080fd5b5060408051808201825260048152630cce4c2f60e31b6020820152905161010c91906107b6565b3480156101e557600080fd5b5061010260015481565b3480156101fb57600080fd5b50610204610404565b604080516001600160a01b039485168152928416602084015292169181019190915260600161010c565b34801561023a57600080fd5b50610102670de0b6b3a764000081565b34801561025657600080fd5b506000610169565b34801561026a57600080fd5b50610102610425565b34801561027f57600080fd5b5061018e6105b8565b6101026105db565b34801561029c57600080fd5b5061018e61063f565b60006102af610683565b60405162461bcd60e51b815260206004820152600f60248201526e43414e4e4f5420574954484452415760881b60448201526064015b60405180910390fd5b60008160000361030057506000919050565b600061030a61063f565b9050806001600160a01b031663b6d24f186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610804565b1561037c5750600092915050565b50600192915050565b6000466001036103a85750735e8422345238f34275888049021821e8e08caa1f90565b466005036103c95750733e04888b1c07a9805861c19551f7ed53145bd8d490565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064016102e5565b60008060006104116105b8565b925061041b610385565b9293600092509050565b6000806104306105b8565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610496919061082d565b9050806000036104a95760009250505090565b80826001600160a01b0316636fcf5e5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190610846565b63ffffffff16836001600160a01b031663bafedcaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610574919061086c565b610582906301e187e0610895565b61058c91906108eb565b61059e90670de0b6b3a7640000610895565b6001600160c01b03166105b19190610911565b9250505090565b6000466001036103a8575073ac3e018457b222d93114458476f3e3416abbe38f90565b60006105e5610683565b6105ee346102ee565b61062b5760405162461bcd60e51b815260206004820152600e60248201526d10d0539393d50811115413d4d25560921b60448201526064016102e5565b6106336106dc565b90506101466001600055565b600046600103610662575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036103c95750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6002600054036106d55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102e5565b6002600055565b600080341161071f5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdb8b5e995c9bc8185b5bdd5b9d608a1b60448201526064016102e5565b600061072961063f565b604051634dcd454760e01b81523360048201526001600160a01b039190911690634dcd454790349060240160206040518083038185885af1158015610772573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610797919061082d565b92915050565b6000602082840312156107af57600080fd5b5035919050565b600060208083528351808285015260005b818110156107e3578581018301518582016040015282016107c7565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561081657600080fd5b8151801515811461082657600080fd5b9392505050565b60006020828403121561083f57600080fd5b5051919050565b60006020828403121561085857600080fd5b815163ffffffff8116811461082657600080fd5b60006020828403121561087e57600080fd5b81516001600160c01b038116811461082657600080fd5b6001600160c01b038281168282168181028316929181158285048214176108cc57634e487b7160e01b600052601160045260246000fd5b50505092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b0383811680610905576109056108d5565b92169190910492915050565b600082610920576109206108d5565b50049056fea2646970667358221220fc07c2d22e07ce6244494e9399295cf0be22f41782f0bb657c03d235abc92d1f64736f6c63430008110033";

type FraxAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FraxAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FraxAdapter__factory extends ContractFactory {
  constructor(...args: FraxAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FraxAdapter> {
    return super.deploy(overrides || {}) as Promise<FraxAdapter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FraxAdapter {
    return super.attach(address) as FraxAdapter;
  }
  override connect(signer: Signer): FraxAdapter__factory {
    return super.connect(signer) as FraxAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FraxAdapterInterface {
    return new utils.Interface(_abi) as FraxAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FraxAdapter {
    return new Contract(address, _abi, signerOrProvider) as FraxAdapter;
  }
}
