/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FraxAdaptor, FraxAdaptorInterface } from "../FraxAdaptor";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adaptorName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "buyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canDeposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "canWithdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "getETHAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040524260805234801561001457600080fd5b506001600055608051611731610032600039600050506117316000f3fe6080604052600436106101d15760003560e01c8063ad5c4648116100f7578063cbc74de711610095578063ebdfda5e11610064578063ebdfda5e1461046c578063ef46b2ab14610481578063f2cd3a12146104a1578063f781b24e146104b657600080fd5b8063cbc74de7146101dd578063ce0696141461043c578063d0e30db014610451578063d148d3921461045957600080fd5b8063c1fe3e48116100d1578063c1fe3e48146103e8578063c89d5b8b146103fd578063c9ac8c8e14610412578063ca8aa0e41461042757600080fd5b8063ad5c4648146103bf578063b51459fe146103d4578063be78e8d9146102f457600080fd5b8063565d3e6e1161016f578063a48217191161013e578063a482171914610351578063aa6430c614610359578063aa6ca8081461036e578063aaf5eb68146103a357600080fd5b8063565d3e6e146102df5780635a33bbbe146102f4578063698e0796146103095780638c9adb2d1461031e57600080fd5b80632e1a7d4d116101ab5780632e1a7d4d1461024d57806339443b8e1461026d5780634aa07e641461029d5780634bc0dcb6146102ca57600080fd5b8063020b627d146101dd5780632397e4d71461020a57806323c34a641461023857600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101f26104cb565b604051600f9190910b81526020015b60405180910390f35b34801561021657600080fd5b5061022a6102253660046114ce565b61051b565b604051908152602001610201565b34801561024457600080fd5b5061022a6105ca565b34801561025957600080fd5b5061022a6102683660046114ce565b6105f9565b34801561027957600080fd5b5061028d6102883660046114ce565b6106c1565b6040519015158152602001610201565b3480156102a957600080fd5b506102b2610758565b6040516001600160a01b039091168152602001610201565b3480156102d657600080fd5b506102b261079c565b3480156102eb57600080fd5b506102b26107bf565b34801561030057600080fd5b506101f2610803565b34801561031557600080fd5b506102b2610813565b34801561032a57600080fd5b5060408051808201825260048152630cce4c2f60e31b60208201529051610201919061150b565b61022a610836565b34801561036557600080fd5b506102b26108b6565b34801561037a57600080fd5b506103836108d9565b604080516001600160a01b03938416815292909116602083015201610201565b3480156103af57600080fd5b5061022a670de0b6b3a764000081565b3480156103cb57600080fd5b506102b26108ea565b3480156103e057600080fd5b50600061028d565b3480156103f457600080fd5b506102b261092e565b34801561040957600080fd5b5061022a610972565b34801561041e57600080fd5b506102b2610b05565b34801561043357600080fd5b506102b2610b28565b34801561044857600080fd5b506102b2610b6c565b61022a610bb0565b61022a610467366004611567565b610ca8565b34801561047857600080fd5b506102b2610d5c565b34801561048d57600080fd5b5061022a61049c3660046114ce565b610da0565b3480156104ad57600080fd5b5061022a610e1e565b3480156104c257600080fd5b506102b2610e4d565b6000466001036104db5750600190565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064015b60405180910390fd5b6000610525610e70565b600082116105635760405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b6044820152606401610512565b600061056d6108d9565b91505061057c81333086610ec9565b600061058784610f3a565b604051909150339082156108fc029083906000818181858888f193505050501580156105b7573d6000803e3d6000fd5b509150506105c56001600055565b919050565b6000466001036104db57507f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b6000610603610e70565b600082116106415760405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b6044820152606401610512565b61064a826106c1565b6106875760405162461bcd60e51b815260206004820152600e60248201526d10d0539393d50811115413d4d25560921b6044820152606401610512565b60405162461bcd60e51b815260206004820152600f60248201526e43414e4e4f5420574954484452415760881b6044820152606401610512565b6000816000036106d357506000919050565b60006106dd610d5c565b9050806001600160a01b031663b6d24f186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906115c5565b1561074f5750600092915050565b50600192915050565b60004660010361077b5750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b466005036104db5750736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b6000466001036104db575073dc24316b9ae028f1497c275eb9192a3ea0f6702290565b6000466001036107e25750735e8422345238f34275888049021821e8e08caa1f90565b466005036104db5750733e04888b1c07a9805861c19551f7ed53145bd8d490565b6000466001036104db5750600090565b6000466001036104db57507306325440d014e39736583c165c2963ba99faf14e90565b6000610840610e70565b600034116108825760405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b6044820152606401610512565b600061088c610fef565b905060006108986108d9565b9150506108a6813384611126565b5090506108b36001600055565b90565b6000466001036104db575073a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b6000806108e4610b05565b90509091565b60004660010361090d575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b466005036104db575073b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b600046600103610951575073ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b466005036104db5750731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b60008061097d610b05565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e391906115e7565b9050806000036109f65760009250505090565b80826001600160a01b0316636fcf5e5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a599190611600565b63ffffffff16836001600160a01b031663bafedcaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611626565b610acf906301e187e061164f565b610ad991906116a5565b610aeb90670de0b6b3a764000061164f565b6001600160c01b0316610afe91906116cb565b9250505090565b6000466001036107e2575073ac3e018457b222d93114458476f3e3416abbe38f90565b600046600103610b4b575073ae78736cd615f374d3085123a210448e74fc639390565b466005036104db575073ae78736cd615f374d3085123a210448e74fc639390565b600046600103610b8f575073ba12222222228d8ba445958a75a0704d566bf2c890565b466005036104db575073ba12222222228d8ba445958a75a0704d566bf2c890565b6000610bba610e70565b60003411610bfc5760405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b6044820152606401610512565b610c05346106c1565b610c425760405162461bcd60e51b815260206004820152600e60248201526d10d0539393d50811115413d4d25560921b6044820152606401610512565b6000610c4c61115b565b90506000610c586108d9565b915050610c66813384611126565b60405182815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a25090506108b36001600055565b6000806001600160a01b038716610cc0575034610ccb565b610ccb8786886111d4565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101879052600060648201526001600160a01b03861690633df0212490839060840160206040518083038185885af1158015610d2c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d5191906115e7565b979650505050505050565b600046600103610d7f575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036104db5750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6000610daa610b05565b6001600160a01b0316634cdad506836040518263ffffffff1660e01b8152600401610dd791815260200190565b602060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1891906115e7565b92915050565b6000466001036104db57507f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b6000466001036104db575073f43211935c781d5ca1a41d2041f397b8a7366c7a90565b600260005403610ec25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610512565b6002600055565b6040516001600160a01b0380851660248301528316604482015260648101829052610f349085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526112e9565b50505050565b600080610f45610b05565b604051635d043b2960e11b815260048101859052306024820181905260448201526001600160a01b03919091169063ba087652906064016020604051808303816000875af1158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906115e7565b90506000610fe7610fce6107bf565b83610fd76108b6565b610fdf6104cb565b610467610803565b949350505050565b6000806110106000346110006108b6565b611008610803565b6104676104cb565b905061101a6107bf565b6001600160a01b031663095ea7b3611030610b05565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a191906115c5565b5060006110ac610b05565b604051636e553f6560e01b8152600481018490523060248201526001600160a01b039190911690636e553f65906044016020604051808303816000875af11580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f91906115e7565b9392505050565b6040516001600160a01b03831660248201526044810182905261115690849063a9059cbb60e01b90606401610efd565b505050565b600080611166610d5c565b604051634dcd454760e01b81523060048201526001600160a01b039190911690634dcd454790349060240160206040518083038185885af11580156111af573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610e1891906115e7565b80158061124e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c91906115e7565b155b6112b95760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610512565b6040516001600160a01b03831660248201526044810182905261115690849063095ea7b360e01b90606401610efd565b600061133e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113bb9092919063ffffffff16565b805190915015611156578080602001905181019061135c91906115c5565b6111565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610512565b6060610fe7848460008585600080866001600160a01b031685876040516113e291906116df565b60006040518083038185875af1925050503d806000811461141f576040519150601f19603f3d011682016040523d82523d6000602084013e611424565b606091505b5091509150610d51878383876060831561149f578251600003611498576001600160a01b0385163b6114985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610512565b5081610fe7565b610fe783838151156114b45781518083602001fd5b8060405162461bcd60e51b8152600401610512919061150b565b6000602082840312156114e057600080fd5b5035919050565b60005b838110156115025781810151838201526020016114ea565b50506000910152565b602081526000825180602084015261152a8160408501602087016114e7565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146105c557600080fd5b8035600f81900b81146105c557600080fd5b600080600080600060a0868803121561157f57600080fd5b6115888661153e565b94506020860135935061159d6040870161153e565b92506115ab60608701611555565b91506115b960808701611555565b90509295509295909350565b6000602082840312156115d757600080fd5b8151801515811461111f57600080fd5b6000602082840312156115f957600080fd5b5051919050565b60006020828403121561161257600080fd5b815163ffffffff8116811461111f57600080fd5b60006020828403121561163857600080fd5b81516001600160c01b038116811461111f57600080fd5b6001600160c01b0382811682821681810283169291811582850482141761168657634e487b7160e01b600052601160045260246000fd5b50505092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b03838116806116bf576116bf61168f565b92169190910492915050565b6000826116da576116da61168f565b500490565b600082516116f18184602087016114e7565b919091019291505056fea2646970667358221220274551bdc790f00e5b946d3faaccfecbe8f212df788ea96bee3791ddbeef816164736f6c63430008110033";

type FraxAdaptorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FraxAdaptorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FraxAdaptor__factory extends ContractFactory {
  constructor(...args: FraxAdaptorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FraxAdaptor> {
    return super.deploy(overrides || {}) as Promise<FraxAdaptor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FraxAdaptor {
    return super.attach(address) as FraxAdaptor;
  }
  override connect(signer: Signer): FraxAdaptor__factory {
    return super.connect(signer) as FraxAdaptor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FraxAdaptorInterface {
    return new utils.Interface(_abi) as FraxAdaptorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FraxAdaptor {
    return new Contract(address, _abi, signerOrProvider) as FraxAdaptor;
  }
}
