/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FraxAdaptor,
  FraxAdaptorInterface,
} from "../../../src/adaptor/FraxAdaptor";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adaptorName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "buyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canDeposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canWithdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "getETHAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a0806040523461002557600160005542608052611887908161002b8239608051815050f35b600080fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c908163020b627d146104825781632397e4d7146109b257816323c34a64146109955781632e1a7d4d1461093857816339443b8e1461090f5781634aa07e64146108f25781634bc0dcb6146108d5578163565d3e6e146108b85781635a33bbbe146105d0578163698e07961461089b57816389a302711461087e5781638c9adb2d1461083d578163a482171914610668578163aa6430c61461064b578163aa6ca8081461061c578163aaf5eb68146105f9578163ad5c4648146105dc578163be78e8d9146105d0578163c1fe3e48146105b3578163c2507ac1146104ec578163c89d5b8b146104cf578163c9ac8c8e146104b2578163ca8aa0e414610495578163cbc74de714610482578163ce06961414610465578163d0e30db01461033b578163d148d392146102d8578163e0bab4c4146102bb578163ebdfda5e1461029e578163ef46b2ab1461020257508063f2cd3a12146101df578063f781b24e146101b25763fbe85f060361001157346101ae5760203660031901126101ae5751908152602090f35b5080fd5b50346101ae57816003193601126101ae576020906101ce61167c565b90516001600160a01b039091168152f35b50346101ae57816003193601126101ae576020906101fb611500565b9051908152f35b8383346101ae576020928360031936011261029a57836001600160a01b036102286113e4565b1691602484518094819363266d6a8360e11b83528035908301525afa92831561028f57809361025a575b505051908152f35b909192508382813d8311610288575b6102738183610c84565b81010312610285575051908380610252565b80fd5b503d610269565b8251903d90823e3d90fd5b8280fd5b5050346101ae57816003193601126101ae576020906101ce611425565b5050346101ae57816003193601126101ae576020906101ce611227565b905060a036600319011261029a57356001600160a01b038082168203610337576044359081168103610337576064359182600f0b8303610333576084359485600f0b8603610285575091602094916101fb93602435906116b5565b8480fd5b8380fd5b9190508260031936011261029a57610351610bfc565b61035c341515610bbe565b61036534610f28565b15610431576001600160a01b03928361037c611425565b16938251948594634dcd454760e01b86523090860152846024602097889334905af19384156104275782946103f6575b50906103c5846001936103bd6113e4565b163390610ca6565b82518481527f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4863392a25551908152f35b9093508481813d8311610420575b61040e8183610c84565b810103126101ae5751926103c56103ac565b503d610404565b83513d84823e3d90fd5b906020606492519162461bcd60e51b8352820152600e60248201526d10d0539393d50811115413d4d25560921b6044820152fd5b5050346101ae57816003193601126101ae576020906101ce6114bf565b5050505061048e610b2d565b3880610011565b5050346101ae57816003193601126101ae576020906101ce61147e565b5050346101ae57816003193601126101ae576020906101ce6113e4565b5050346101ae57816003193601126101ae576020906101fb610f9d565b90503461029a576020928360031936011261028557813591670de0b6b3a7640000808402938085048214901517156105a057859060246001600160a01b036105326113e4565b16938751948593849263266d6a8360e11b84528301525afa918215610595578092610563575b50506101fb91610ece565b9091508482813d831161058e575b61057b8183610c84565b810103126102855750516101fb38610558565b503d610571565b8451903d90823e3d90fd5b634e487b7160e01b835260118252602483fd5b5050346101ae57816003193601126101ae576020906101ce6112d9565b5050505061048e610b59565b5050346101ae57816003193601126101ae576020906101ce6111ce565b5050346101ae57816003193601126101ae5760209051670de0b6b3a76400008152f35b8284346102855780600319360112610285576001600160a01b0361063e6113e4565b1682519182526020820152f35b5050346101ae57816003193601126101ae576020906101ce611643565b9190508260031936011261029a5761067e610bfc565b610689341515610bbe565b610691611643565b9261069a6115c3565b936106a36115e4565b835195630f7c084960e21b8752600f0b85870152600f0b6024860152346044860152816064860152602094858160848160018060a01b0395863491165af1908115610833578391610806575b5061073a8682846106fe61138b565b16856107086113e4565b16878a8a519687958694859363095ea7b360e01b8552840160209093929193604081019460018060a01b031681520152565b03925af180156107fc57908792916107cf575b506044836107596113e4565b16968587519889948593636e553f6560e01b85528401523060248401525af193841561042757829461079e575b5090610797846001936103bd6113e4565b5551908152f35b9093508481813d83116107c8575b6107b68183610c84565b810103126101ae575192610797610786565b503d6107ac565b6107ee90833d85116107f5575b6107e68183610c84565b810190610cf0565b503861074d565b503d6107dc565b85513d86823e3d90fd5b90508581813d831161082c575b61081d8183610c84565b8101031261029a5751386106ef565b503d610813565b84513d85823e3d90fd5b9190503461029a578260031936011261029a5761087a925080519161086183610c52565b8252630cce4c2f60e31b60208301525191829182610b75565b0390f35b5050346101ae57816003193601126101ae576020906101ce611280565b5050346101ae57816003193601126101ae576020906101ce61160a565b5050346101ae57816003193601126101ae576020906101ce61138b565b5050346101ae57816003193601126101ae576020906101ce61158a565b5050346101ae57816003193601126101ae576020906101ce611332565b828434610285576020366003190112610285575061092f60209235610f28565b90519015158152f35b905082346102855760203660031901126102855750602060649261095a610bfc565b61096683351515610eee565b5162461bcd60e51b815291820152600f60248201526e43414e4e4f5420574954484452415760881b6044820152fd5b5050346101ae57816003193601126101ae576020906101fb611545565b8383346101ae576020928360031936011261029a578035906109d2610bfc565b6109dd821515610eee565b6001600160a01b0391826109ef6113e4565b85516323b872dd60e01b8982015233602482015230604482015260648082018590528152911660a0820167ffffffffffffffff811183821017610b1a578652879291610a3a91610d08565b606484610a456113e4565b16938787519586948593635d043b2960e11b85528401523060248401523060448401525af1908115610b0d578491610ade575b50610aa691610a8561138b565b1690610a8f611643565b610a976115e4565b91610aa06115c3565b936116b5565b918080848015610ad4575b8280929181923390f115610ac9576001905551908152f35b9051903d90823e3d90fd5b6108fc9150610ab1565b90508481813d8311610b06575b610af58183610c84565b810103126103375751610aa6610a78565b503d610aeb565b50505051903d90823e3d90fd5b634e487b7160e01b885260418552602488fd5b5034610b54576000366003190112610b54576020610b496115e4565b60405190600f0b8152f35b600080fd5b5034610b54576000366003190112610b54576020610b496115c3565b6020808252825181830181905290939260005b828110610baa57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610b88565b15610bc557565b60405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b6044820152606490fd5b600260005414610c0d576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6040810190811067ffffffffffffffff821117610c6e57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610c6e57604052565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252610cee91610ce982606481015b03601f198101845283610c84565b610d08565b565b90816020910312610b5457518015158103610b545790565b6040516001600160a01b03909116929190610d2281610c52565b6020918282527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564838301526000808285829451910182895af13d15610e2d573d9567ffffffffffffffff8711610e1957610d9d94959660405190610d8f88601f19601f8401160183610c84565b81528093873d92013e610e39565b80519081610daa57505050565b8280610dba938301019101610cf0565b15610dc25750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b83526041600452602483fd5b610d9d93949591506060915b91929015610e9b5750815115610e4d575090565b3b15610e565790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610eae5750805190602001fd5b60405162461bcd60e51b8152908190610eca9060048301610b75565b0390fd5b8115610ed8570490565b634e487b7160e01b600052601260045260246000fd5b15610ef557565b60405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b6044820152606490fd5b15610f6e57600460206001600160a01b03610f41611425565b16604051928380926316da49e360e31b82525afa908115610f9157600091610f73575b50610f6e57600190565b600090565b610f8b915060203d81116107f5576107e68183610c84565b38610f64565b6040513d6000823e3d90fd5b6001600160a01b03610fad6113e4565b16906040918251906318160ddd60e01b825260209060049482848781855afa93841561119857600094611169575b50831561115f578051635d7f6e5560e11b81529280848881865afa93841561115457600094611114575b506001600160c01b03936301e187e09085168181028616949181159186041417156110ff5790808892845193848092636fcf5e5f60e01b82525afa9283156110f557506000926110b7575b505063ffffffff169081156110a2579082910416670de0b6b3a7640000918282021691818304149015171561108d5761108a929350610ece565b90565b601184634e487b7160e01b6000525260246000fd5b601286634e487b7160e01b6000525260246000fd5b81813d83116110ee575b6110cb8183610c84565b810103126101ae57519063ffffffff82168203610285575063ffffffff38611050565b503d6110c1565b513d6000823e3d90fd5b601188634e487b7160e01b6000525260246000fd5b81818196933d831161114d575b61112b8183610c84565b810103126101ae5751906001600160c01b038216820361028557509238611005565b503d611121565b82513d6000823e3d90fd5b5060009450505050565b90938382813d8311611191575b6111808183610c84565b810103126102855750519238610fdb565b503d611176565b50513d6000823e3d90fd5b60609060208152601060208201526f1d5b9adb9bdddb8818da185a5b881a5960821b60408201520190565b6001461461120f57600546146111f75760405162461bcd60e51b815280610eca600482016111a3565b73b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6001461461126857600546146112505760405162461bcd60e51b815280610eca600482016111a3565b7373967c6a0904aa032c103b4104747e88c566b1a290565b736b175474e89094c44da98b954eedeac495271d0f90565b600146146112c157600546146112a95760405162461bcd60e51b815280610eca600482016111a3565b732f3a40a3db8a7e3d09b0adfefbce4f6f8192755790565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4890565b6001461461131a57600546146113025760405162461bcd60e51b815280610eca600482016111a3565b731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b60014614611373576005461461135b5760405162461bcd60e51b815280610eca600482016111a3565b736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b600146146113cc57600546146113b45760405162461bcd60e51b815280610eca600482016111a3565b733e04888b1c07a9805861c19551f7ed53145bd8d490565b735e8422345238f34275888049021821e8e08caa1f90565b6001461461140d57600546146113b45760405162461bcd60e51b815280610eca600482016111a3565b73ac3e018457b222d93114458476f3e3416abbe38f90565b60014614611466576005461461144e5760405162461bcd60e51b815280610eca600482016111a3565b736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b73bafa44efe7901e04e39dad13167d089c559c113890565b600146146114a757600546146114a75760405162461bcd60e51b815280610eca600482016111a3565b73ae78736cd615f374d3085123a210448e74fc639390565b600146146114e857600546146114e85760405162461bcd60e51b815280610eca600482016111a3565b73ba12222222228d8ba445958a75a0704d566bf2c890565b600146146115215760405162461bcd60e51b815280610eca600482016111a3565b7f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b600146146115665760405162461bcd60e51b815280610eca600482016111a3565b7f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b600146146115ab5760405162461bcd60e51b815280610eca600482016111a3565b73dc24316b9ae028f1497c275eb9192a3ea0f6702290565b60014614610f6e5760405162461bcd60e51b815280610eca600482016111a3565b600146146116055760405162461bcd60e51b815280610eca600482016111a3565b600190565b6001461461162b5760405162461bcd60e51b815280610eca600482016111a3565b7306325440d014e39736583c165c2963ba99faf14e90565b600146146116645760405162461bcd60e51b815280610eca600482016111a3565b73a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b6001461461169d5760405162461bcd60e51b815280610eca600482016111a3565b73f43211935c781d5ca1a41d2041f397b8a7366c7a90565b90939192906001600160a01b039081166000816117495750509060209360849234915b6040519788968795630f7c084960e21b8752600f0b6004870152600f0b6024860152604485015260006064850152165af1908115610f915760009161171b575090565b906020823d8211611741575b8161173460209383610c84565b8101031261028557505190565b3d9150611727565b90929186158015611804575b156117a05760405163095ea7b360e01b6020828101919091526001600160a01b03881660248301526044820189905296608495909161179b91610ce98260648101610cdb565b6116d8565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b81523060048201528682166024820152602081604481885afa90811561186f57839161183e575b5015611755565b90506020813d8211611867575b8161185860209383610c84565b8101031261029a575138611837565b3d915061184b565b6040513d85823e3d90fdfea164736f6c6343000811000a";

type FraxAdaptorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FraxAdaptorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FraxAdaptor__factory extends ContractFactory {
  constructor(...args: FraxAdaptorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FraxAdaptor> {
    return super.deploy(overrides || {}) as Promise<FraxAdaptor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FraxAdaptor {
    return super.attach(address) as FraxAdaptor;
  }
  override connect(signer: Signer): FraxAdaptor__factory {
    return super.connect(signer) as FraxAdaptor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FraxAdaptorInterface {
    return new utils.Interface(_abi) as FraxAdaptorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FraxAdaptor {
    return new Contract(address, _abi, signerOrProvider) as FraxAdaptor;
  }
}
