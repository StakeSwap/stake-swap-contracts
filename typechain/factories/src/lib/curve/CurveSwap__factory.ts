/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurveSwap,
  CurveSwapInterface,
} from "../../../../src/lib/curve/CurveSwap";

const _abi = [
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610d0f908161001c8239f35b600080fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c908163020b627d1461053557816323c34a64146106765781634aa07e64146106595781634bc0dcb61461063c578163565d3e6e1461061f5781635a33bbbe1461059f578163698e07961461060257816389a30271146105e5578163aa6430c6146105c8578163ad5c4648146105ab578163be78e8d91461059f578163c1fe3e4814610582578163c9ac8c8e14610565578163ca8aa0e414610548578163cbc74de714610535578163ce06961414610518578163d148d3921461019b57508063e0bab4c41461017f578063ebdfda5e14610163578063f2cd3a12146101405763f781b24e03610011573461013c578160031936011261013c5760209061012b610bbd565b90516001600160a01b039091168152f35b5080fd5b503461013c578160031936011261013c5760209061015c610a3c565b9051908152f35b503461013c578160031936011261013c5760209061012b610961565b503461013c578160031936011261013c5760209061012b610763565b91905060a0366003190112610272576001600160a01b0382358181169390849003610514576024938435926044938435918216809203610510576064359485600f0b80960361050c576084359384600f0b809503610508578990806102885750509160849391602096959334935b89519a8b988997630f7c084960e21b89528801528601528401528860648401525af191821561027e578392610243575b6020838351908152f35b9091506020813d8211610276575b8161025e60209383610bf6565b810103126102725760209250519038610239565b8280fd5b3d9150610251565b81513d85823e3d90fd5b839a999a959195158015610494575b15610434578a8951602092878483019363095ea7b360e01b855283015286868301528582528c608083019367ffffffffffffffff93808610858711176104215760c081018681108682111761040d578f528686527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015251829182855af1913d156103fc573d9081116103ea57918d9e9d9161035594938e519061034788601f19601f8401160183610bf6565b81528093873d92013e610c2e565b805180610370575b5050509160209695939160849593610209565b818391810103126103e6578101518015908115036103e65761039357808061035d565b867f5361666545524332303a204552433230206f7065726174696f6e20646964206e84602a8d6084958e519562461bcd60e51b8752860152840152820152691bdd081cdd58d8d9595960b21b6064820152fd5b8b80fd5b634e487b7160e01b8e5260418b528e8efd5b50610355929160609e9d9e91610c2e565b5050634e487b7160e01b825260418c528f82fd5b50634e487b7160e01b825260418c528f82fd5b885162461bcd60e51b81526020818901526036818d01527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f818501527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b508851636eb1769f60e11b815230888201528b81018690526020818581855afa9081156104fe578b916104c9575b5015610297565b90506020813d82116104f6575b816104e360209383610bf6565b810103126104f25751386104c2565b8a80fd5b3d91506104d6565b8a513d8d823e3d90fd5b8980fd5b8880fd5b8780fd5b8480fd5b50503461013c578160031936011261013c5760209061012b6109fb565b50505050610541610693565b3880610011565b50503461013c578160031936011261013c5760209061012b6109ba565b50503461013c578160031936011261013c5760209061012b610920565b50503461013c578160031936011261013c5760209061012b610815565b505050506105416106bf565b50503461013c578160031936011261013c5760209061012b610706565b50503461013c578160031936011261013c5760209061012b610b84565b50503461013c578160031936011261013c5760209061012b6107bc565b50503461013c578160031936011261013c5760209061012b610b4b565b50503461013c578160031936011261013c5760209061012b6108c7565b50503461013c578160031936011261013c5760209061012b610ac6565b50503461013c578160031936011261013c5760209061012b61086e565b50503461013c578160031936011261013c5760209061015c610a81565b50346106ba5760003660031901126106ba5760206106af610b25565b60405190600f0b8152f35b600080fd5b50346106ba5760003660031901126106ba5760206106af610aff565b60609060208152601060208201526f1d5b9adb9bdddb8818da185a5b881a5960821b60408201520190565b6001461461074b57600546146107335760405162461bcd60e51b81528061072f600482016106db565b0390fd5b73b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b600146146107a4576005461461078c5760405162461bcd60e51b81528061072f600482016106db565b7373967c6a0904aa032c103b4104747e88c566b1a290565b736b175474e89094c44da98b954eedeac495271d0f90565b600146146107fd57600546146107e55760405162461bcd60e51b81528061072f600482016106db565b732f3a40a3db8a7e3d09b0adfefbce4f6f8192755790565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4890565b60014614610856576005461461083e5760405162461bcd60e51b81528061072f600482016106db565b731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b600146146108af57600546146108975760405162461bcd60e51b81528061072f600482016106db565b736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b6001461461090857600546146108f05760405162461bcd60e51b81528061072f600482016106db565b733e04888b1c07a9805861c19551f7ed53145bd8d490565b735e8422345238f34275888049021821e8e08caa1f90565b6001461461094957600546146108f05760405162461bcd60e51b81528061072f600482016106db565b73ac3e018457b222d93114458476f3e3416abbe38f90565b600146146109a2576005461461098a5760405162461bcd60e51b81528061072f600482016106db565b736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b73bafa44efe7901e04e39dad13167d089c559c113890565b600146146109e357600546146109e35760405162461bcd60e51b81528061072f600482016106db565b73ae78736cd615f374d3085123a210448e74fc639390565b60014614610a245760054614610a245760405162461bcd60e51b81528061072f600482016106db565b73ba12222222228d8ba445958a75a0704d566bf2c890565b60014614610a5d5760405162461bcd60e51b81528061072f600482016106db565b7f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b60014614610aa25760405162461bcd60e51b81528061072f600482016106db565b7f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b60014614610ae75760405162461bcd60e51b81528061072f600482016106db565b73dc24316b9ae028f1497c275eb9192a3ea0f6702290565b60014614610b205760405162461bcd60e51b81528061072f600482016106db565b600090565b60014614610b465760405162461bcd60e51b81528061072f600482016106db565b600190565b60014614610b6c5760405162461bcd60e51b81528061072f600482016106db565b7306325440d014e39736583c165c2963ba99faf14e90565b60014614610ba55760405162461bcd60e51b81528061072f600482016106db565b73a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b60014614610bde5760405162461bcd60e51b81528061072f600482016106db565b73f43211935c781d5ca1a41d2041f397b8a7366c7a90565b90601f8019910116810190811067ffffffffffffffff821117610c1857604052565b634e487b7160e01b600052604160045260246000fd5b91929015610c905750815115610c42575090565b3b15610c4b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610ca35750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610ce9575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610cc656fea164736f6c6343000811000a";

type CurveSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwap__factory extends ContractFactory {
  constructor(...args: CurveSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveSwap> {
    return super.deploy(overrides || {}) as Promise<CurveSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveSwap {
    return super.attach(address) as CurveSwap;
  }
  override connect(signer: Signer): CurveSwap__factory {
    return super.connect(signer) as CurveSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapInterface {
    return new utils.Interface(_abi) as CurveSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwap {
    return new Contract(address, _abi, signerOrProvider) as CurveSwap;
  }
}
